unit uPSI_VclGoogleMap;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
 https://github.com/maxkleiner/DelphiGoogleMap/tree/main/Source

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_VclGoogleMap = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TEdgeGoogleMapViewer(CL: TPSPascalCompiler);
procedure SIRegister_VclGoogleMap(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TEdgeGoogleMapViewer(CL: TPSRuntimeClassImporter);
procedure RIRegister_VclGoogleMap(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Vcl.GoogleMap, Vcl.Controls;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_VclGoogleMap]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TEdgeGoogleMapViewer(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomEdgeBrowser', 'TEdgeGoogleMapViewer') do
  with CL.AddClassN(CL.FindClass('TCustomEdgeBrowser'),'TEdgeGoogleMapViewer') do
  begin
    RegisterMethod('Function TextToCoord( const Value : String) : Extended');
    RegisterMethod('Function CoordToText( const Coord : double) : string');
    RegisterMethod('Procedure RegisterGoogleMapsApiKey( const AApiKey : string)');
    RegisterMethod('Procedure RegisterUserDataFolder( const ATempFolder : string)');
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Procedure Free');
    RegisterMethod('Procedure ShowPrintUI');
    RegisterMethod('Function DefaultCustomMarkerJSON : string');
    RegisterMethod('Procedure ShowMap( const AAddress : string)');
    RegisterMethod('Procedure ShowMap2( const AAddress : string)');
    RegisterMethod('Procedure ShowMap3( AMapCenter: TLatLng)');
    RegisterMethod('Procedure Loaded2');
    RegisterMethod('Procedure HideMap');
    RegisterMethod('Function JSONEncodeString( const AText : string) : string');
    RegisterMethod('Procedure GotoLocation( LatLng : TLatLng; AAddMarker : boolean)');
    RegisterMethod('Procedure GotoAddress( const Address : string)');
    RegisterMethod('Procedure RouteByLocations');
    RegisterMethod('Procedure RouteByAddresses');
    RegisterMethod('Procedure ShowStreetViewControl( Show : boolean)');
    RegisterMethod('Procedure ShowBicycling( Show : boolean)');
    RegisterMethod('Procedure ShowTraffic( Show : boolean)');
    RegisterMethod('Procedure ShowDirectionsPanel( const Value : boolean)');
    RegisterMethod('Procedure ShowZoomControl( Show : boolean)');
    RegisterMethod('Procedure ShowMapTypeControl( Show : boolean)');
    RegisterMethod('Procedure ShowFullScreenControl( Show : boolean)');
    RegisterMethod('Procedure PutMarker( LatLng : TLatLng; ADescription : string; AAnimation : TGoogleMarkerAnimationId; ALabel : string; AInfoWindowContent : string; ACustomMarkerJSON : string)');
    RegisterMethod('Procedure ClearMarkers');
    RegisterMethod('Procedure HideMarkers');
    RegisterMethod('Procedure ShowMarkers');
    RegisterProperty('ApiKey', 'string', iptr);
    RegisterMethod('Procedure PutCircle( LatLng : TLatLng; Radius : Double; Editable, Draggable, Visible, Clickable : Boolean; StrokeColor : String; StrokeOpacity : Double; StrokeWeight : Integer; FillColor : String; Fil' +
      'lOpacity : Double; AInfoWindowContent : string)');
    RegisterMethod('Procedure ClearCircles');
    RegisterMethod('Procedure HideCircles');
    RegisterMethod('Procedure ShowCircles');
    RegisterMethod('Procedure PutPolyline( Path : String; Geodesic, Editable, Visible, Clickable, FitBounds : Boolean; StrokeColor : String; StrokeOpacity : Double; StrokeWeight : Integer; AInfoWindowContent : string)');
    RegisterMethod('Procedure ClearPolylines');
    RegisterMethod('Procedure HidePolylines');
    RegisterMethod('Procedure ShowPolylines');
    RegisterMethod('Procedure PutPolygon( Path : String; Editable, Visible, Clickable, FitBounds : Boolean; StrokeColor : String; StrokeOpacity : Double; StrokeWeight : Integer; FillColor : String; FillOpacity : Double; ' +
      'AInfoWindowContent : string)');
    RegisterMethod('Procedure ClearPolygons');
    RegisterMethod('Procedure HidePolygons');
    RegisterMethod('Procedure ShowPolygons');
    RegisterMethod('procedure SetBounds(ALeft, ATop, ARight, ABottom: Integer)');
    RegisterMethod('Function ComputeDistanceBetween( Origin, Destination : TLatLng) : Double');
    RegisterProperty('MapShowPanControl', 'boolean', iptrw);
    RegisterProperty('MapShowZoomControl', 'boolean', iptrw);
    RegisterProperty('MapShowTypeControl', 'boolean', iptrw);
    RegisterProperty('MapShowScaleControl', 'boolean', iptrw);
    RegisterProperty('MapShowFullScreenControl', 'boolean', iptrw);
    RegisterProperty('MapShowStreetViewControl', 'boolean', iptrw);
    RegisterProperty('MapShowoverviewMapControl', 'boolean', iptrw);
    RegisterProperty('MapAddress', 'string', iptrw);
    RegisterProperty('MapLatitude', 'double', iptrw);
    RegisterProperty('MapLongitude', 'double', iptrw);
    RegisterProperty('MapLocationDesc', 'string', iptrw);
    RegisterProperty('MapStartAddress', 'string', iptrw);
    RegisterProperty('MapDestinationAddress', 'string', iptrw);
    RegisterProperty('MapStartLatitude', 'double', iptrw);
    RegisterProperty('MapStartLongitude', 'double', iptrw);
    RegisterProperty('MapDestinationLatitude', 'double', iptrw);
    RegisterProperty('MapDestinationLongitude', 'double', iptrw);
    RegisterProperty('MapShowDirectionsPanel', 'boolean', iptrw);
    RegisterProperty('MapZoom', 'integer', iptrw);
    RegisterProperty('MapTypeId', 'TGoogleMapTypeId', iptrw);
    RegisterProperty('MapRouteModeId', 'TGoogleRouteModeId', iptrw);
    RegisterProperty('MapShowTrafficLayer', 'boolean', iptrw);
    RegisterProperty('MapShowBicyclingLayer', 'boolean', iptrw);
    RegisterProperty('MapVisible', 'boolean', iptrw);
    RegisterProperty('BeforeInitMap', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeShowMap', 'TNotifyEvent', iptrw);
    RegisterProperty('AfterHideMap', 'TNotifyEvent', iptrw);
    RegisterProperty('OnGetHTMLBody', 'TEdgeGoogleMapViewHTMLBody', iptrw);
    RegisterProperty('OnGetJavascript', 'TEdgeGoogleMapViewJavascript', iptrw);
    RegisterProperty('OnWebUnhandledMessageReceived', 'TWebMessageReceivedEvent', iptrw);
    RegisterProperty('OnMapClick', 'TEdgeGoogleMapViewMapClick', iptrw);
    RegisterProperty('OnMapRightClick', 'TEdgeGoogleMapViewMapClick', iptrw);
    RegisterProperty('OnMapZoom', 'TEdgeGoogleMapViewZoomChanged', iptrw);
     RegisterPublishedProperties;
     RegisterProperty('OnExecuteScript','TExecuteScriptEvent',iptrw);
      RegisterProperty('Left', 'integer', iptrw);
    RegisterProperty('Top', 'integer', iptrw);
    RegisterProperty('Right', 'integer', iptrw);
    RegisterProperty('Bottom', 'integer', iptrw);
    RegisterProperty('Align', 'TAlign', iptrw);
    //RegisterProperty('Color', 'TColor', iptrw);
     RegisterProperty('Hint', 'string', iptrw);
      RegisterProperty('ShowHint', 'boolean', iptrw);

    {with Cl.FindClass('TControl') do begin
      RegisterProperty('Parent', 'TWinControl', iptRW);
    end;   }
    RegisterProperty('Parent', 'TWinControl', iptrw);
     RegisterProperty('ONCHANGE', 'TNotifyEvent', iptrw);
    RegisterProperty('ONCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONDBLCLICK', 'TNotifyEvent', iptrw);
    RegisterProperty('ONENTER', 'TNotifyEvent', iptrw);
    RegisterProperty('ONEXIT', 'TNotifyEvent', iptrw);


   {  property Left: TMarginSize index 0 read FLeft write SetMargin default 3;
    property Top: TMarginSize index 1 read FTop write SetMargin default 3;
    property Right: TMarginSize index 2 read FRight write SetMargin default 3;
    property Bottom: TMarginSize index 3 read FBottom write SetMargin default 3;  }
  end;
end;

const GetJSGeometry =
 //Result :=
  '  function ComputeDistanceBetween(FromLat, FromLng, ToLat, ToLng){'+sLineBreak+
  '   var From = new  google.maps.LatLng(FromLat, FromLng);'+sLineBreak+
  '   var To = new  google.maps.LatLng(ToLat, ToLng);'+sLineBreak+
  '   var distance = google.maps.geometry.spherical.computeDistanceBetween(From, To);'+sLineBreak+
  '   window.chrome.webview.postMessage(JSON.stringify({"event" : "response_value",'+sLineBreak+
  '     "field": "distance", "value" :  distance} , null, 2));'+sLineBreak+
  '  }'+sLineBreak;

 const GetJSPutPolygon=
//begin
  //Result :=
  '  function PutPolygon(Path, Editable, Visible, Clickable, FitBounds, StrokeColor,StrokeOpacity, StrokeWeight, FillColor, FillOpacity, Info){'+sLineBreak+
  '   var polygon = new google.maps.Polygon({'+sLineBreak+
  '      path: Path, '+sLineBreak+
  '      map: map,'+sLineBreak+
  '      zIndex: 1,'+sLineBreak+
  '      editable: Editable,'+sLineBreak+
  '      clickable: Clickable,'+sLineBreak+
  '      visible: Visible,'+sLineBreak+
  '      strokeColor: StrokeColor,'+sLineBreak+
  '      strokeOpacity: StrokeOpacity,'+sLineBreak+
  '      strokeWeight: StrokeWeight,'+sLineBreak+
  '      fillColor: FillColor,'+sLineBreak+
  '      fillOpacity: FillOpacity,'+sLineBreak+
  '   });'+sLineBreak+
  '   polygonsArray.push(polygon); '+sLineBreak+
  '   if (Info) { ' +sLineBreak+
  '       google.maps.event.addListener(polygon, "click", function(event) {' +sLineBreak+
  '         infoWindow.setPosition(event.latLng);'+sLineBreak+
  '         infoWindow.setContent(Info);'+sLineBreak+
  '         infoWindow.open(polygon.getMap(), polygon);'+sLineBreak+
  '    });'+sLineBreak+
  '   }'+sLineBreak+
  '   if (FitBounds) { '+sLineBreak+
  '       var bounds = new google.maps.LatLngBounds();'+sLineBreak+
  '       polygon.getPath().forEach(function(latLng) {'+sLineBreak+
  '           bounds.extend(latLng);'+sLineBreak+
  '       });'+sLineBreak+
  '       map.fitBounds(bounds);' +sLineBreak+
  '   }'+sLineBreak+
  '}';
//end;



(*----------------------------------------------------------------------------*)
procedure SIRegister_VclGoogleMap(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('DEFAULT_ZOOM_FACTOR','LongInt').SetInt( 15);
 CL.AddConstantN('DelphiGoogleMapViewerVersion','String').SetString( '1.5.0');
  CL.AddConstantN('GetJSGeometry','String').SetString( GetJSGeometry);
  CL.AddConstantN('GetJSPutPolygon','String').SetString( GetJSPutPolygon);
  CL.AddTypeS('EGoogleMapError', 'Exception');
  CL.AddTypeS('TGoogleMapTypeId', '( mtROADMAP, mtSATELLITE, mtHYBRID, mtTERRAIN )');
  CL.AddTypeS('TGoogleRouteModeId', '( rmDRIVING, rmWALKING, rmBICYCLING, rmTRANSIT )');
  CL.AddTypeS('TGoogleMarkerAnimationId', '( maNONE, maBOUNCE, maDROP )');
 CL.AddConstantN('ABOUT_BLANK_PAGE','String').SetString( 'about:blank');
  CL.AddTypeS('TLatLng', 'record Latitude : double; Longitude : double; Descrip'
   +'tion : string; end');
  CL.AddTypeS('TEdgeGoogleMapViewHTMLBody', 'Procedure ( ASender : TObject; var'
   +' AHTML : string)');
  CL.AddTypeS('TEdgeGoogleMapViewJavascript', 'Procedure ( ASender : TObject; v'
   +'ar AJavascript : string)');
  CL.AddTypeS('TEdgeGoogleMapViewMapClick', 'Procedure ( ASender : TObject; ALa'
   +'tLng : TLatLng)');
  CL.AddTypeS('TEdgeGoogleMapViewZoomChanged', 'Procedure ( ASender : TObject; '
   +'AZoom : integer)');
   CL.AddClassN(CL.FindClass('TCustomEdgeBrowser'),'TEdgeGoogleMapViewer');
  CL.AddTypeS('TExecuteScriptEvent', 'Procedure ( ASender : TEdgeGoogleMapViewer; '
   +'AResult: integer; const AResultObjectAsJson: string)');
  // TExecuteScriptEvent = procedure (Sender: TCustomEdgeBrowser; AResult: HResult; const AResultObjectAsJson: string) of object;


  SIRegister_TEdgeGoogleMapViewer(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnMapZoom_W(Self: TEdgeGoogleMapViewer; const T: TEdgeGoogleMapViewZoomChanged);
begin Self.OnMapZoom := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnMapZoom_R(Self: TEdgeGoogleMapViewer; var T: TEdgeGoogleMapViewZoomChanged);
begin T := Self.OnMapZoom; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnMapRightClick_W(Self: TEdgeGoogleMapViewer; const T: TEdgeGoogleMapViewMapClick);
begin Self.OnMapRightClick := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnMapRightClick_R(Self: TEdgeGoogleMapViewer; var T: TEdgeGoogleMapViewMapClick);
begin T := Self.OnMapRightClick; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnMapClick_W(Self: TEdgeGoogleMapViewer; const T: TEdgeGoogleMapViewMapClick);
begin Self.OnMapClick := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnMapClick_R(Self: TEdgeGoogleMapViewer; var T: TEdgeGoogleMapViewMapClick);
begin T := Self.OnMapClick; end;
              { (*}
(*----------------------------------------------------------------------------*)
//procedure TEdgeGoogleMapViewerOnWebUnhandledMessageReceived_W(Self: TEdgeGoogleMapViewer; const T: TWebMessageReceivedEvent);
//begin Self.OnWebUnhandledMessageReceived := T; end;

(*----------------------------------------------------------------------------*)
//procedure TEdgeGoogleMapViewerOnWebUnhandledMessageReceived_R(Self: TEdgeGoogleMapViewer; var T: TWebMessageReceivedEvent);
//begin T := Self.OnWebUnhandledMessageReceived; end;
            // }
(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnGetJavascript_W(Self: TEdgeGoogleMapViewer; const T: TEdgeGoogleMapViewJavascript);
begin Self.OnGetJavascript := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnGetJavascript_R(Self: TEdgeGoogleMapViewer; var T: TEdgeGoogleMapViewJavascript);
begin T := Self.OnGetJavascript; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnGetHTMLBody_W(Self: TEdgeGoogleMapViewer; const T: TEdgeGoogleMapViewHTMLBody);
begin Self.OnGetHTMLBody := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerOnGetHTMLBody_R(Self: TEdgeGoogleMapViewer; var T: TEdgeGoogleMapViewHTMLBody);
begin T := Self.OnGetHTMLBody; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerAfterHideMap_W(Self: TEdgeGoogleMapViewer; const T: TNotifyEvent);
begin Self.AfterHideMap := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerAfterHideMap_R(Self: TEdgeGoogleMapViewer; var T: TNotifyEvent);
begin T := Self.AfterHideMap; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerBeforeShowMap_W(Self: TEdgeGoogleMapViewer; const T: TNotifyEvent);
begin Self.BeforeShowMap := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerBeforeShowMap_R(Self: TEdgeGoogleMapViewer; var T: TNotifyEvent);
begin T := Self.BeforeShowMap; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerBeforeInitMap_W(Self: TEdgeGoogleMapViewer; const T: TNotifyEvent);
begin Self.BeforeInitMap := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerBeforeInitMap_R(Self: TEdgeGoogleMapViewer; var T: TNotifyEvent);
begin T := Self.BeforeInitMap; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapVisible_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapVisible := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapVisible_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapVisible; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowBicyclingLayer_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowBicyclingLayer := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowBicyclingLayer_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowBicyclingLayer; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowTrafficLayer_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowTrafficLayer := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowTrafficLayer_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowTrafficLayer; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapRouteModeId_W(Self: TEdgeGoogleMapViewer; const T: TGoogleRouteModeId);
begin Self.MapRouteModeId := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapRouteModeId_R(Self: TEdgeGoogleMapViewer; var T: TGoogleRouteModeId);
begin T := Self.MapRouteModeId; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapTypeId_W(Self: TEdgeGoogleMapViewer; const T: TGoogleMapTypeId);
begin Self.MapTypeId := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapTypeId_R(Self: TEdgeGoogleMapViewer; var T: TGoogleMapTypeId);
begin T := Self.MapTypeId; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapZoom_W(Self: TEdgeGoogleMapViewer; const T: integer);
begin Self.MapZoom := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapZoom_R(Self: TEdgeGoogleMapViewer; var T: integer);
begin T := Self.MapZoom; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowDirectionsPanel_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowDirectionsPanel := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowDirectionsPanel_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowDirectionsPanel; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapDestinationLongitude_W(Self: TEdgeGoogleMapViewer; const T: double);
begin Self.MapDestinationLongitude := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapDestinationLongitude_R(Self: TEdgeGoogleMapViewer; var T: double);
begin T := Self.MapDestinationLongitude; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapDestinationLatitude_W(Self: TEdgeGoogleMapViewer; const T: double);
begin Self.MapDestinationLatitude := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapDestinationLatitude_R(Self: TEdgeGoogleMapViewer; var T: double);
begin T := Self.MapDestinationLatitude; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapStartLongitude_W(Self: TEdgeGoogleMapViewer; const T: double);
begin Self.MapStartLongitude := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapStartLongitude_R(Self: TEdgeGoogleMapViewer; var T: double);
begin T := Self.MapStartLongitude; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapStartLatitude_W(Self: TEdgeGoogleMapViewer; const T: double);
begin Self.MapStartLatitude := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapStartLatitude_R(Self: TEdgeGoogleMapViewer; var T: double);
begin T := Self.MapStartLatitude; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapDestinationAddress_W(Self: TEdgeGoogleMapViewer; const T: string);
begin Self.MapDestinationAddress := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapDestinationAddress_R(Self: TEdgeGoogleMapViewer; var T: string);
begin T := Self.MapDestinationAddress; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapStartAddress_W(Self: TEdgeGoogleMapViewer; const T: string);
begin Self.MapStartAddress := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapStartAddress_R(Self: TEdgeGoogleMapViewer; var T: string);
begin T := Self.MapStartAddress; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapLocationDesc_W(Self: TEdgeGoogleMapViewer; const T: string);
begin Self.MapLocationDesc := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapLocationDesc_R(Self: TEdgeGoogleMapViewer; var T: string);
begin T := Self.MapLocationDesc; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapLongitude_W(Self: TEdgeGoogleMapViewer; const T: double);
begin Self.MapLongitude := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapLongitude_R(Self: TEdgeGoogleMapViewer; var T: double);
begin T := Self.MapLongitude; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapLatitude_W(Self: TEdgeGoogleMapViewer; const T: double);
begin Self.MapLatitude := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapLatitude_R(Self: TEdgeGoogleMapViewer; var T: double);
begin T := Self.MapLatitude; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapAddress_W(Self: TEdgeGoogleMapViewer; const T: string);
begin Self.MapAddress := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapAddress_R(Self: TEdgeGoogleMapViewer; var T: string);
begin T := Self.MapAddress; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowoverviewMapControl_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowoverviewMapControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowoverviewMapControl_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowoverviewMapControl; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowStreetViewControl_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowStreetViewControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowStreetViewControl_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowStreetViewControl; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowFullScreenControl_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowFullScreenControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowFullScreenControl_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowFullScreenControl; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowScaleControl_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowScaleControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowScaleControl_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowScaleControl; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowTypeControl_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowTypeControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowTypeControl_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowTypeControl; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowZoomControl_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowZoomControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowZoomControl_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowZoomControl; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowPanControl_W(Self: TEdgeGoogleMapViewer; const T: boolean);
begin Self.MapShowPanControl := T; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerMapShowPanControl_R(Self: TEdgeGoogleMapViewer; var T: boolean);
begin T := Self.MapShowPanControl; end;

(*----------------------------------------------------------------------------*)
procedure TEdgeGoogleMapViewerApiKey_R(Self: TEdgeGoogleMapViewer; var T: string);
begin T := Self.ApiKey; end;

(*----------------------------------------------------------------------------*)
Procedure TEdgeGoogleMapViewerShowMap_P(Self: TEdgeGoogleMapViewer;  AMapCenter : TLatLng; const AAddress : string);
Begin self.ShowMap2( AAddress);
END;

procedure TControlParentR(Self: TEdgeGoogleMapViewer; var T: TWinControl); begin T := Self.Parent; end;
procedure TControlParentW(Self: TEdgeGoogleMapViewer; T: TWinControl); begin Self.Parent:= T; end;

procedure TControlHintR(Self: TEdgeGoogleMapViewer; var T: string); begin T := Self.hint; end;
procedure TControlHintW(Self: TEdgeGoogleMapViewer; T: string); begin Self.hint:= T; end;
procedure TControlShowHintR(Self: TEdgeGoogleMapViewer; var T: boolean); begin T := Self.showhint; end;
procedure TControlShowHintW(Self: TEdgeGoogleMapViewer; T: boolean); begin Self.showhint:= T; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TEdgeGoogleMapViewer(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TEdgeGoogleMapViewer) do
  begin
    RegisterMethod(@TEdgeGoogleMapViewer.TextToCoord, 'TextToCoord');
    RegisterMethod(@TEdgeGoogleMapViewer.CoordToText, 'CoordToText');
    RegisterMethod(@TEdgeGoogleMapViewer.RegisterGoogleMapsApiKey, 'RegisterGoogleMapsApiKey');
    RegisterMethod(@TEdgeGoogleMapViewer.RegisterUserDataFolder, 'RegisterUserDataFolder');
    RegisterConstructor(@TEdgeGoogleMapViewer.Create, 'Create');
    RegisterMethod(@TEdgeGoogleMapViewer.Destroy, 'Free');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowPrintUI, 'ShowPrintUI');
    RegisterMethod(@TEdgeGoogleMapViewer.DefaultCustomMarkerJSON, 'DefaultCustomMarkerJSON');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowMap, 'ShowMap');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowMap2, 'ShowMap2');
     RegisterMethod(@TEdgeGoogleMapViewer.ShowMap3, 'ShowMap3');
    RegisterMethod(@TEdgeGoogleMapViewer.loaded2, 'Loaded2');
    RegisterMethod(@TEdgeGoogleMapViewer.HideMap, 'HideMap');
    RegisterMethod(@TEdgeGoogleMapViewer.JSONEncodeString, 'JSONEncodeString');
    RegisterMethod(@TEdgeGoogleMapViewer.GotoLocation, 'GotoLocation');
    RegisterMethod(@TEdgeGoogleMapViewer.GotoAddress, 'GotoAddress');
    RegisterMethod(@TEdgeGoogleMapViewer.RouteByLocations, 'RouteByLocations');
    RegisterMethod(@TEdgeGoogleMapViewer.RouteByAddresses, 'RouteByAddresses');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowStreetViewControl, 'ShowStreetViewControl');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowBicycling, 'ShowBicycling');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowTraffic, 'ShowTraffic');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowDirectionsPanel, 'ShowDirectionsPanel');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowZoomControl, 'ShowZoomControl');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowMapTypeControl, 'ShowMapTypeControl');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowFullScreenControl, 'ShowFullScreenControl');
    RegisterMethod(@TEdgeGoogleMapViewer.PutMarker, 'PutMarker');
    RegisterMethod(@TEdgeGoogleMapViewer.ClearMarkers, 'ClearMarkers');
    RegisterMethod(@TEdgeGoogleMapViewer.HideMarkers, 'HideMarkers');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowMarkers, 'ShowMarkers');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerApiKey_R,nil,'ApiKey');
    RegisterMethod(@TEdgeGoogleMapViewer.PutCircle, 'PutCircle');
    RegisterMethod(@TEdgeGoogleMapViewer.ClearCircles, 'ClearCircles');
    RegisterMethod(@TEdgeGoogleMapViewer.HideCircles, 'HideCircles');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowCircles, 'ShowCircles');
    RegisterMethod(@TEdgeGoogleMapViewer.PutPolyline, 'PutPolyline');
    RegisterMethod(@TEdgeGoogleMapViewer.ClearPolylines, 'ClearPolylines');
    RegisterMethod(@TEdgeGoogleMapViewer.HidePolylines, 'HidePolylines');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowPolylines, 'ShowPolylines');
    RegisterMethod(@TEdgeGoogleMapViewer.PutPolygon, 'PutPolygon');
    RegisterMethod(@TEdgeGoogleMapViewer.ClearPolygons, 'ClearPolygons');
    RegisterMethod(@TEdgeGoogleMapViewer.HidePolygons, 'HidePolygons');
    RegisterMethod(@TEdgeGoogleMapViewer.ShowPolygons, 'ShowPolygons');
    RegisterMethod(@TEdgeGoogleMapViewer.SetBounds, 'SetBounds');
    RegisterMethod(@TEdgeGoogleMapViewer.ComputeDistanceBetween, 'ComputeDistanceBetween');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowPanControl_R,@TEdgeGoogleMapViewerMapShowPanControl_W,'MapShowPanControl');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowZoomControl_R,@TEdgeGoogleMapViewerMapShowZoomControl_W,'MapShowZoomControl');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowTypeControl_R,@TEdgeGoogleMapViewerMapShowTypeControl_W,'MapShowTypeControl');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowScaleControl_R,@TEdgeGoogleMapViewerMapShowScaleControl_W,'MapShowScaleControl');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowFullScreenControl_R,@TEdgeGoogleMapViewerMapShowFullScreenControl_W,'MapShowFullScreenControl');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowStreetViewControl_R,@TEdgeGoogleMapViewerMapShowStreetViewControl_W,'MapShowStreetViewControl');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowoverviewMapControl_R,@TEdgeGoogleMapViewerMapShowoverviewMapControl_W,'MapShowoverviewMapControl');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapAddress_R,@TEdgeGoogleMapViewerMapAddress_W,'MapAddress');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapLatitude_R,@TEdgeGoogleMapViewerMapLatitude_W,'MapLatitude');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapLongitude_R,@TEdgeGoogleMapViewerMapLongitude_W,'MapLongitude');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapLocationDesc_R,@TEdgeGoogleMapViewerMapLocationDesc_W,'MapLocationDesc');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapStartAddress_R,@TEdgeGoogleMapViewerMapStartAddress_W,'MapStartAddress');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapDestinationAddress_R,@TEdgeGoogleMapViewerMapDestinationAddress_W,'MapDestinationAddress');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapStartLatitude_R,@TEdgeGoogleMapViewerMapStartLatitude_W,'MapStartLatitude');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapStartLongitude_R,@TEdgeGoogleMapViewerMapStartLongitude_W,'MapStartLongitude');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapDestinationLatitude_R,@TEdgeGoogleMapViewerMapDestinationLatitude_W,'MapDestinationLatitude');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapDestinationLongitude_R,@TEdgeGoogleMapViewerMapDestinationLongitude_W,'MapDestinationLongitude');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowDirectionsPanel_R,@TEdgeGoogleMapViewerMapShowDirectionsPanel_W,'MapShowDirectionsPanel');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapZoom_R,@TEdgeGoogleMapViewerMapZoom_W,'MapZoom');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapTypeId_R,@TEdgeGoogleMapViewerMapTypeId_W,'MapTypeId');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapRouteModeId_R,@TEdgeGoogleMapViewerMapRouteModeId_W,'MapRouteModeId');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowTrafficLayer_R,@TEdgeGoogleMapViewerMapShowTrafficLayer_W,'MapShowTrafficLayer');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapShowBicyclingLayer_R,@TEdgeGoogleMapViewerMapShowBicyclingLayer_W,'MapShowBicyclingLayer');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerMapVisible_R,@TEdgeGoogleMapViewerMapVisible_W,'MapVisible');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerBeforeInitMap_R,@TEdgeGoogleMapViewerBeforeInitMap_W,'BeforeInitMap');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerBeforeShowMap_R,@TEdgeGoogleMapViewerBeforeShowMap_W,'BeforeShowMap');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerAfterHideMap_R,@TEdgeGoogleMapViewerAfterHideMap_W,'AfterHideMap');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerOnGetHTMLBody_R,@TEdgeGoogleMapViewerOnGetHTMLBody_W,'OnGetHTMLBody');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerOnGetJavascript_R,@TEdgeGoogleMapViewerOnGetJavascript_W,'OnGetJavascript');
    //RegisterPropertyHelper(@TEdgeGoogleMapViewerOnWebUnhandledMessageReceived_R,@TEdgeGoogleMapViewerOnWebUnhandledMessageReceived_W,'OnWebUnhandledMessageReceived');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerOnMapClick_R,@TEdgeGoogleMapViewerOnMapClick_W,'OnMapClick');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerOnMapRightClick_R,@TEdgeGoogleMapViewerOnMapRightClick_W,'OnMapRightClick');
    RegisterPropertyHelper(@TEdgeGoogleMapViewerOnMapZoom_R,@TEdgeGoogleMapViewerOnMapZoom_W,'OnMapZoom');
   RegisterPropertyHelper(@TControlParentR, @TControlParentW, 'PARENT');
    RegisterPropertyHelper(@TControlHintR, @TControlHintW, 'Hint');
     RegisterPropertyHelper(@TControlShowHintR, @TControlShowHintW, 'ShowHint');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_VclGoogleMap(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TEdgeGoogleMapViewer(CL);
end;

 
 
{ TPSImport_VclGoogleMap }
(*----------------------------------------------------------------------------*)
procedure TPSImport_VclGoogleMap.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_VclGoogleMap(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_VclGoogleMap.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_VclGoogleMap(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
